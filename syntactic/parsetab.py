
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSASSIGN COMMA DIVIDE DIVIDE_ASSIGN ELSE ELSEIF END EQ FLOAT FUNCTION GE GT ID IF INTEGER LBRACE LE LPAREN LT MINUS MINUS_ASSIGN MOD NE NEWLINE PLUS PLUS_ASSIGN RBRACE RETURN RPAREN SEMICOLON STRING TIMES TIMES_ASSIGN WHILEprogram : statement_list\n| emptystatement_list : statement_list statement\n| statementstatement : assignment_statement\n| if_statement\n| while_statement\n| function_def_statement\n| expression_statementexpression_statement : expressionassignment_statement : ID ASSIGN expression\n| ID PLUS_ASSIGN expression\n| ID MINUS_ASSIGN expression\n| ID TIMES_ASSIGN expression\n| ID DIVIDE_ASSIGN expressionif_statement : IF expression statement_list else_if_clauses_opt else_clause_opt ENDelse_if_clauses_opt : else_if_clauses\n| emptyelse_if_clauses : else_if_clauses else_if_clause\n| else_if_clauseelse_if_clause : ELSEIF expression statement_listelse_clause_opt : else_clause\n| emptyelse_clause : ELSE statement_listwhile_statement : WHILE expression statement_list ENDfunction_def_statement : FUNCTION ID LPAREN param_list_opt RPAREN statement_list ENDparam_list_opt : param_list\n| emptyparam_list : param_list COMMA ID\n| IDexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression MOD expression\n| expression EQ expression\n| expression NE expression\n| expression LT expression\n| expression LE expression\n| expression GT expression\n| expression GE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : INTEGER\n| FLOAT\n| STRING\n| IDempty :'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,17,18,19,20,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,70,83,88,],[-48,0,-1,-2,-4,-5,-6,-7,-8,-9,-47,-10,-44,-45,-46,-3,-47,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-43,-25,-16,-26,]),'ID':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,70,78,80,81,82,83,84,85,86,88,],[10,10,-4,-5,-6,-7,-8,-9,-47,-10,38,38,40,38,38,-44,-45,-46,-3,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,10,-47,10,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,10,38,10,71,-43,38,-32,-25,10,10,10,87,-16,10,10,10,-26,]),'IF':([0,2,4,5,6,7,8,9,10,11,17,18,19,20,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,69,70,78,80,81,83,84,85,86,88,],[12,12,-4,-5,-6,-7,-8,-9,-47,-10,-44,-45,-46,-3,12,-47,12,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,12,12,-43,-32,-25,12,12,12,-16,12,12,12,-26,]),'WHILE':([0,2,4,5,6,7,8,9,10,11,17,18,19,20,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,69,70,78,80,81,83,84,85,86,88,],[13,13,-4,-5,-6,-7,-8,-9,-47,-10,-44,-45,-46,-3,13,-47,13,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,13,13,-43,-32,-25,13,13,13,-16,13,13,13,-26,]),'FUNCTION':([0,2,4,5,6,7,8,9,10,11,17,18,19,20,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,69,70,78,80,81,83,84,85,86,88,],[14,14,-4,-5,-6,-7,-8,-9,-47,-10,-44,-45,-46,-3,14,-47,14,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,14,14,-43,-32,-25,14,14,14,-16,14,14,14,-26,]),'MINUS':([0,2,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,68,69,70,78,80,81,83,84,85,86,88,],[16,16,-4,-5,-6,-7,-8,-9,-47,27,16,16,16,16,-44,-45,-46,-3,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,60,-47,60,27,-42,27,27,27,27,27,-31,-32,-33,-34,-35,27,27,27,27,27,27,16,16,16,-43,16,-32,-25,16,60,16,-16,16,16,16,-26,]),'LPAREN':([0,2,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,68,69,70,78,80,81,83,84,85,86,88,],[15,15,-4,-5,-6,-7,-8,-9,-47,-10,15,15,15,15,-44,-45,-46,-3,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-47,15,62,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,15,15,15,-43,15,-32,-25,15,15,15,-16,15,15,15,-26,]),'INTEGER':([0,2,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,68,69,70,78,80,81,83,84,85,86,88,],[17,17,-4,-5,-6,-7,-8,-9,-47,-10,17,17,17,17,-44,-45,-46,-3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-47,17,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,17,17,17,-43,17,-32,-25,17,17,17,-16,17,17,17,-26,]),'FLOAT':([0,2,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,68,69,70,78,80,81,83,84,85,86,88,],[18,18,-4,-5,-6,-7,-8,-9,-47,-10,18,18,18,18,-44,-45,-46,-3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-47,18,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,18,18,18,-43,18,-32,-25,18,18,18,-16,18,18,18,-26,]),'STRING':([0,2,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,68,69,70,78,80,81,83,84,85,86,88,],[19,19,-4,-5,-6,-7,-8,-9,-47,-10,19,19,19,19,-44,-45,-46,-3,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-47,19,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,19,19,19,-43,19,-32,-25,19,19,19,-16,19,19,19,-26,]),'ELSEIF':([4,5,6,7,8,9,10,11,17,18,19,20,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,63,65,67,69,70,79,83,85,88,],[-4,-5,-6,-7,-8,-9,-47,-10,-44,-45,-46,-3,-47,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,68,-43,68,-20,-42,-25,-19,-16,-21,-26,]),'ELSE':([4,5,6,7,8,9,10,11,17,18,19,20,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,63,64,65,66,67,69,70,79,83,85,88,],[-4,-5,-6,-7,-8,-9,-47,-10,-44,-45,-46,-3,-47,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-48,-43,78,-17,-18,-20,-42,-25,-19,-16,-21,-26,]),'END':([4,5,6,7,8,9,10,11,17,18,19,20,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,64,65,66,67,69,70,75,76,77,79,83,84,85,86,88,],[-4,-5,-6,-7,-8,-9,-47,-10,-44,-45,-46,-3,-47,-42,-11,-12,-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-48,70,-43,-48,-17,-18,-20,-42,-25,83,-22,-23,-19,-16,-24,-21,88,-26,]),'ASSIGN':([10,],[21,]),'PLUS_ASSIGN':([10,],[22,]),'MINUS_ASSIGN':([10,],[23,]),'TIMES_ASSIGN':([10,],[24,]),'DIVIDE_ASSIGN':([10,],[25,]),'PLUS':([10,11,17,18,19,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,69,80,],[-47,26,-44,-45,-46,26,-47,26,26,-42,26,26,26,26,26,-31,-32,-33,-34,-35,26,26,26,26,26,26,-43,-32,26,]),'TIMES':([10,11,17,18,19,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,69,80,],[-47,28,-44,-45,-46,28,-47,28,28,-42,28,28,28,28,28,28,28,-33,-34,-35,28,28,28,28,28,28,-43,28,28,]),'DIVIDE':([10,11,17,18,19,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,69,80,],[-47,29,-44,-45,-46,29,-47,29,29,-42,29,29,29,29,29,29,29,-33,-34,-35,29,29,29,29,29,29,-43,29,29,]),'MOD':([10,11,17,18,19,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,69,80,],[-47,30,-44,-45,-46,30,-47,30,30,-42,30,30,30,30,30,30,30,-33,-34,-35,30,30,30,30,30,30,-43,30,30,]),'EQ':([10,11,17,18,19,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,69,80,],[-47,31,-44,-45,-46,31,-47,31,31,-42,31,31,31,31,31,-31,-32,-33,-34,-35,31,31,31,31,31,31,-43,-32,31,]),'NE':([10,11,17,18,19,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,69,80,],[-47,32,-44,-45,-46,32,-47,32,32,-42,32,32,32,32,32,-31,-32,-33,-34,-35,32,32,32,32,32,32,-43,-32,32,]),'LT':([10,11,17,18,19,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,69,80,],[-47,33,-44,-45,-46,33,-47,33,33,-42,33,33,33,33,33,-31,-32,-33,-34,-35,33,33,33,33,33,33,-43,-32,33,]),'LE':([10,11,17,18,19,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,69,80,],[-47,34,-44,-45,-46,34,-47,34,34,-42,34,34,34,34,34,-31,-32,-33,-34,-35,34,34,34,34,34,34,-43,-32,34,]),'GT':([10,11,17,18,19,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,69,80,],[-47,35,-44,-45,-46,35,-47,35,35,-42,35,35,35,35,35,-31,-32,-33,-34,-35,35,35,35,35,35,35,-43,-32,35,]),'GE':([10,11,17,18,19,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,69,80,],[-47,36,-44,-45,-46,36,-47,36,36,-42,36,36,36,36,36,-31,-32,-33,-34,-35,36,36,36,36,36,36,-43,-32,36,]),'RPAREN':([17,18,19,38,41,42,48,49,50,51,52,53,54,55,56,57,58,62,63,71,72,73,74,87,],[-44,-45,-46,-47,63,-42,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-48,-43,-30,81,-27,-28,-29,]),'COMMA':([71,73,87,],[-30,82,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,37,39,78,80,81,],[2,59,61,84,85,86,]),'empty':([0,59,62,64,],[3,66,74,77,]),'statement':([0,2,37,39,59,61,78,80,81,84,85,86,],[4,20,4,4,20,20,4,4,4,20,20,20,]),'assignment_statement':([0,2,37,39,59,61,78,80,81,84,85,86,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,2,37,39,59,61,78,80,81,84,85,86,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'while_statement':([0,2,37,39,59,61,78,80,81,84,85,86,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'function_def_statement':([0,2,37,39,59,61,78,80,81,84,85,86,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'expression_statement':([0,2,37,39,59,61,78,80,81,84,85,86,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'expression':([0,2,12,13,15,16,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,59,60,61,68,78,80,81,84,85,86,],[11,11,37,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,11,11,11,69,11,80,11,11,11,11,11,11,]),'else_if_clauses_opt':([59,],[64,]),'else_if_clauses':([59,],[65,]),'else_if_clause':([59,65,],[67,79,]),'param_list_opt':([62,],[72,]),'param_list':([62,],[73,]),'else_clause_opt':([64,],[75,]),'else_clause':([64,],[76,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',15),
  ('program -> empty','program',1,'p_program','parser.py',16),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',26),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> function_def_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',42),
  ('expression_statement -> expression','expression_statement',1,'p_expression_statement','parser.py',48),
  ('assignment_statement -> ID ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',53),
  ('assignment_statement -> ID PLUS_ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',54),
  ('assignment_statement -> ID MINUS_ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',55),
  ('assignment_statement -> ID TIMES_ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',56),
  ('assignment_statement -> ID DIVIDE_ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',57),
  ('if_statement -> IF expression statement_list else_if_clauses_opt else_clause_opt END','if_statement',6,'p_if_statement','parser.py',62),
  ('else_if_clauses_opt -> else_if_clauses','else_if_clauses_opt',1,'p_else_if_clauses_opt','parser.py',72),
  ('else_if_clauses_opt -> empty','else_if_clauses_opt',1,'p_else_if_clauses_opt','parser.py',73),
  ('else_if_clauses -> else_if_clauses else_if_clause','else_if_clauses',2,'p_else_if_clauses','parser.py',78),
  ('else_if_clauses -> else_if_clause','else_if_clauses',1,'p_else_if_clauses','parser.py',79),
  ('else_if_clause -> ELSEIF expression statement_list','else_if_clause',3,'p_else_if_clause','parser.py',87),
  ('else_clause_opt -> else_clause','else_clause_opt',1,'p_else_clause_opt','parser.py',92),
  ('else_clause_opt -> empty','else_clause_opt',1,'p_else_clause_opt','parser.py',93),
  ('else_clause -> ELSE statement_list','else_clause',2,'p_else_clause','parser.py',98),
  ('while_statement -> WHILE expression statement_list END','while_statement',4,'p_while_statement','parser.py',103),
  ('function_def_statement -> FUNCTION ID LPAREN param_list_opt RPAREN statement_list END','function_def_statement',7,'p_function_def_statement','parser.py',108),
  ('param_list_opt -> param_list','param_list_opt',1,'p_param_list_opt','parser.py',113),
  ('param_list_opt -> empty','param_list_opt',1,'p_param_list_opt','parser.py',114),
  ('param_list -> param_list COMMA ID','param_list',3,'p_param_list','parser.py',119),
  ('param_list -> ID','param_list',1,'p_param_list','parser.py',120),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',129),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',130),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',131),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',132),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','parser.py',133),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',134),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',135),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',136),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',137),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',138),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',139),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',144),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',149),
  ('expression -> INTEGER','expression',1,'p_expression_term','parser.py',154),
  ('expression -> FLOAT','expression',1,'p_expression_term','parser.py',155),
  ('expression -> STRING','expression',1,'p_expression_term','parser.py',156),
  ('expression -> ID','expression',1,'p_expression_term','parser.py',157),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',170),
]
